diff --git a/caml-shift/Makefile b/caml-shift/Makefile
index 098390f..886fb36 100644
--- a/caml-shift/Makefile
+++ b/caml-shift/Makefile
@@ -44,7 +44,7 @@
 #OCAMLINCLUDES=../../byterun
 #OCAMLINCLUDES=./ocaml-byterun-3.09
 #OCAMLINCLUDES=./ocaml-byterun-3.10
-OCAMLINCLUDES=./ocaml-byterun-3.11
+#OCAMLINCLUDES=./ocaml-byterun-3.11
 
 LIBDIR := $(shell ocamlc -where)
 
@@ -70,7 +70,7 @@ STDINCLUDES=$(LIBDIR)/caml
 STUBLIBDIR=$(LIBDIR)/stublibs
 # CC=$(NATIVECC)
 CC=gcc
-CFLAGS=-fPIC -Wall -I$(OCAMLINCLUDES) -I$(STDINCLUDES) -O2
+CFLAGS=-fPIC -Wall -I$(STDINCLUDES) -O2
 NATIVEFLAGS=-DCAML_NAME_SPACE -DNATIVE_CODE \
        -DTARGET_$(ARCH) -DSYS_$(SYSTEM)
 RANLIB=ranlib
@@ -124,7 +124,7 @@ delimcc.cmo: delimcc.cmi
 # When using GCC 4.7, add the flag -fno-ipa-sra
 stacks-native.o: stacks-native.c
 	$(CC) -c $(NATIVEFLAGS) -O2 -fPIC -Wall \
-	-I$(OCAMLINCLUDES) -I$(STDINCLUDES) stacks-native.c
+	-I$(STDINCLUDES) stacks-native.c
 
 top:	libdelimcc.a delimcc.cma
 	$(OCAMLMKTOP) -o ocamltopcc delimcc.cma
diff --git a/caml-shift/delim_serialize.c b/caml-shift/delim_serialize.c
index 7ac2ef2..97c5574 100644
--- a/caml-shift/delim_serialize.c
+++ b/caml-shift/delim_serialize.c
@@ -12,7 +12,9 @@
 
  *------------------------------------------------------------------------
  */
+#define CAML_INTERNALS
 
+#include <stdint.h>
 #include <string.h>
 #include "misc.h"
 #include <alloc.h>
@@ -355,7 +357,7 @@ static value abs_rec(value global_data_arr, value v)
   if(Tag_val(v) == Custom_tag && Wosize_val(v) == 2 &&
      strcmp(Custom_ops_val(v)->identifier,"delimcc_gdix") == 0)
   {
-    const int32 i = *((int32 *) Data_custom_val(v));
+    const int32_t i = *((int32_t *) Data_custom_val(v));
     value f;
 #if defined(DEBUG_SER) && DEBUG_SER
     fprintf(stderr, "absolutizing %d\n",i);
@@ -366,7 +368,7 @@ static value abs_rec(value global_data_arr, value v)
     {
       const value f1 = Field(f,1);
       myassert( Is_block(f1) && Wosize_val(f1) == 2 &&
-		*((int32 *) Data_custom_val(f1)) == i);
+		*((int32_t *) Data_custom_val(f1)) == i);
     }
     v = Field(f,0);
     myassert( Is_block(v) && Is_in_heap(v) && Tag_val(v) == Closure_tag );
@@ -483,20 +485,20 @@ value output_delim_value(value global_data_arr,
 
 
 /* Implementing the custom data type global_data_ix
-   The contents is the int32 index in the global data table.
+   The contents is the int32_t index in the global data table.
    Don't forget to invoke global_data_register_custom_ops ()
    somewhere in the initialization code.
 */
 
 static void gdix_serialize(value v, uintnat * wsize_32, uintnat * wsize_64)
 {
-  caml_serialize_int_4((*((int32 *) Data_custom_val(v))));
+  caml_serialize_int_4((*((int32_t *) Data_custom_val(v))));
   *wsize_32 = *wsize_64 = 4;
 }
 
 static uintnat gdix_deserialize(void * dst)
 {
-  *((int32 *) dst) = caml_deserialize_sint_4();
+  *((int32_t *) dst) = caml_deserialize_sint_4();
   return 4;
 }
 
@@ -519,7 +521,7 @@ CAMLexport value global_data_ix_make(value i) /* int->global_data_idx */
 {
   value res = caml_alloc_custom(&global_data_ix_ops, 4, 0, 1);
   myassert( Is_long(i) );
-  (*((int32 *) Data_custom_val(res))) = Long_val(i);
+  (*((int32_t *) Data_custom_val(res))) = Long_val(i);
   return res;
 }
 
diff --git a/caml-shift/stacks-native.c b/caml-shift/stacks-native.c
index 23f197f..47c0c8b 100644
--- a/caml-shift/stacks-native.c
+++ b/caml-shift/stacks-native.c
@@ -127,6 +127,7 @@ Thanks to Anthony Tavener for investigation.
 
 */
 
+#define CAML_INTERNALS
 
 #include "misc.h"
 #include "memory.h"
diff --git a/caml-shift/stacks.c b/caml-shift/stacks.c
index 3d498ff..cb3b76f 100644
--- a/caml-shift/stacks.c
+++ b/caml-shift/stacks.c
@@ -60,6 +60,8 @@
  *------------------------------------------------------------------------
  */
 
+#define CAML_INTERNALS
+
 #include <string.h>
 #include "misc.h"
 #include <alloc.h>
